{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Cliente } from '../modelo/Cliente';\nlet PrincipalComponent = class PrincipalComponent {\n  // Construtor\n  constructor(servico) {\n    this.servico = servico;\n    // Objeto do tipo Cliente\n    this.cliente = new Cliente();\n    // Variável para visibilidade dos botões\n    this.btnCadastro = true;\n    // Variável para visibilidade da tabela\n    this.tabela = true;\n    // JSON de clientes\n    this.clientes = [];\n  }\n  // Método de seleção\n  selecionar() {\n    this.servico.selecionar().subscribe(retorno => this.clientes = retorno);\n  }\n  // Método de cadastro\n  cadastrar() {\n    this.servico.cadastrar(this.cliente).subscribe(retorno => {\n      // Cadastrar o cliente no vetor\n      this.clientes.push(retorno);\n      // Limpar formulário\n      this.cliente = new Cliente();\n      // Mensagem\n      alert('Cliente cadastrado com sucesso!');\n    });\n  }\n  // Método para selecionar um cliente específico\n  selecionarCliente(posicao) {\n    // Selecionar cliente no vetor\n    this.cliente = this.clientes[posicao];\n    // Visibilidade dos botões\n    this.btnCadastro = false;\n    // Visibilidade da tabela\n    this.tabela = false;\n  }\n  // Método para editar clientes\n  editar() {\n    this.servico.editar(this.cliente).subscribe(retorno => {\n      // Obter posiçao do vetor onde está o cliente\n      let posicao = this.clientes.findIndex(obj => {\n        return obj.id == retorno.id;\n      });\n      // Alterar os dados do cliente no vetor\n      this.clientes[posicao] = retorno;\n      // Limpar formulário\n      this.cliente = new Cliente();\n      // Visibilidade dos botões\n      this.btnCadastro = true;\n      // Visibilidade da tabela\n      this.tabela = true;\n      // Mensagem\n      alert('Cliente alterado com sucesso!');\n    });\n  }\n  // Método para remover clientes\n  remover() {\n    this.servico.remover(this.cliente.id).subscribe(retorno => {\n      // Obter posiçao do vetor onde está o cliente\n      let posicao = this.clientes.findIndex(obj => {\n        return obj.id == this.cliente.id;\n      });\n      // Remover cliente do vetor\n      this.clientes.splice(posicao, 1);\n      // Limpar formulário\n      this.cliente = new Cliente();\n      // Visibilidade dos botões\n      this.btnCadastro = true;\n      // Visibilidade da tabela\n      this.tabela = true;\n      // Mensagem\n      alert('Cliente removido com sucesso!');\n    });\n  }\n  // Método para cancelar\n  cancelar() {\n    // Limpar formulário\n    this.cliente = new Cliente();\n    // Visibilidade dos botões\n    this.btnCadastro = true;\n    // Visibilidade da tabela\n    this.tabela = true;\n  }\n  // Método de inicialização\n  ngOnInit() {\n    this.selecionar();\n  }\n};\nPrincipalComponent = __decorate([Component({\n  selector: 'app-principal',\n  templateUrl: './principal.component.html',\n  styleUrls: ['./principal.component.css']\n})], PrincipalComponent);\nexport { PrincipalComponent };","map":{"version":3,"mappings":"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","names":["Component","Cliente","PrincipalComponent","constructor","servico","selecionar","subscribe","retorno","clientes","cadastrar","cliente","push","alert","selecionarCliente","posicao","btnCadastro","tabela","editar","findIndex","obj","id","remover","splice","cancelar","ngOnInit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\projetos\\2023-Spring-Boot-v3.0.1-MySQL-Angular-v15.0\\api-front\\src\\app\\principal\\principal.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Cliente } from '../modelo/Cliente';\r\nimport { ClienteService } from '../servico/cliente.service';\r\n\r\n@Component({\r\n  selector: 'app-principal',\r\n  templateUrl: './principal.component.html',\r\n  styleUrls: ['./principal.component.css']\r\n})\r\nexport class PrincipalComponent {\r\n\r\n    // Objeto do tipo Cliente\r\n    cliente = new Cliente();\r\n\r\n    // Variável para visibilidade dos botões\r\n    btnCadastro:boolean = true;\r\n\r\n    // Variável para visibilidade da tabela\r\n    tabela:boolean = true;\r\n\r\n    // JSON de clientes\r\n    clientes:Cliente[] = [];\r\n\r\n    // Construtor\r\n    constructor(private servico:ClienteService){}\r\n\r\n    // Método de seleção\r\n    selecionar():void{\r\n      this.servico.selecionar()\r\n      .subscribe(retorno => this.clientes = retorno);\r\n    }\r\n\r\n    // Método de cadastro\r\n    cadastrar():void{\r\n      this.servico.cadastrar(this.cliente)\r\n      .subscribe(retorno => { \r\n\r\n        // Cadastrar o cliente no vetor\r\n        this.clientes.push(retorno); \r\n\r\n        // Limpar formulário\r\n        this.cliente = new Cliente();\r\n\r\n        // Mensagem\r\n        alert('Cliente cadastrado com sucesso!');\r\n      });\r\n    }\r\n\r\n    // Método para selecionar um cliente específico\r\n    selecionarCliente(posicao:number):void{\r\n\r\n      // Selecionar cliente no vetor\r\n      this.cliente = this.clientes[posicao];\r\n\r\n      // Visibilidade dos botões\r\n      this.btnCadastro = false;\r\n\r\n      // Visibilidade da tabela\r\n      this.tabela = false;\r\n\r\n    }\r\n\r\n    // Método para editar clientes\r\n    editar():void{\r\n\r\n      this.servico.editar(this.cliente)\r\n      .subscribe(retorno => {\r\n\r\n        // Obter posiçao do vetor onde está o cliente\r\n        let posicao = this.clientes.findIndex(obj => {\r\n          return obj.id == retorno.id;\r\n        });\r\n\r\n        // Alterar os dados do cliente no vetor\r\n        this.clientes[posicao] = retorno;\r\n\r\n        // Limpar formulário\r\n        this.cliente = new Cliente();\r\n\r\n        // Visibilidade dos botões\r\n        this.btnCadastro = true;\r\n\r\n        // Visibilidade da tabela\r\n        this.tabela = true;\r\n\r\n        // Mensagem\r\n        alert('Cliente alterado com sucesso!');\r\n\r\n      });\r\n\r\n    }\r\n\r\n    // Método para remover clientes\r\n    remover():void{\r\n\r\n      this.servico.remover(this.cliente.id)\r\n      .subscribe(retorno => {\r\n\r\n        // Obter posiçao do vetor onde está o cliente\r\n        let posicao = this.clientes.findIndex(obj => {\r\n          return obj.id == this.cliente.id;\r\n        });\r\n\r\n        // Remover cliente do vetor\r\n        this.clientes.splice(posicao, 1);\r\n\r\n        // Limpar formulário\r\n        this.cliente = new Cliente();\r\n\r\n        // Visibilidade dos botões\r\n        this.btnCadastro = true;\r\n\r\n        // Visibilidade da tabela\r\n        this.tabela = true;\r\n\r\n        // Mensagem\r\n        alert('Cliente removido com sucesso!');\r\n\r\n      });\r\n\r\n    }\r\n\r\n    // Método para cancelar\r\n    cancelar():void{\r\n\r\n      // Limpar formulário\r\n      this.cliente = new Cliente();\r\n\r\n      // Visibilidade dos botões\r\n      this.btnCadastro = true;\r\n\r\n      // Visibilidade da tabela\r\n      this.tabela = true;\r\n\r\n    }\r\n\r\n    // Método de inicialização\r\n    ngOnInit(){\r\n      this.selecionar();\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}